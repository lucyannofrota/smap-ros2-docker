# Based on https://github.com/gbalke/docker-ros2-opengl

version: '2.17.2'

services:
# TODO: Define health checks
  ros2-zed:
    #user: "ros"
    network_mode: "host"
    image: smap:zed-wrapper
    container_name: zed-wrapper
    healthcheck:
      #test: ["CMD-SHELL", "ps -a | grep -q smap_sampler"]
      #bash -c ""
      #test: ["CMD-SHELL", ". /workspace/install/setup.bash; ros2 node list | grep -q /smap_sampler_node"]
      test: ["CMD", "bash", "-c", "./workspace/install/setup.bash; ros2 node list | grep -q /smap/sampler_node"]
      start_period: 1m
      interval: 5s
      timeout: 1s
      retries: 300
    # depends_on:
    #   ros2-env:
    #     condition: service_healthy
    build:
      network: host
      context: .
      target: setup
      dockerfile: ./Docker/Dockerfile_zed.dockerfile
      args:
        # Base Image
        IMAGE_NAME: nvidia/cuda:11.4.1-devel-ubuntu20.04
        UBUNTU_VERSION: 20.04
        UBUNTU_RELEASE_YEAR: 20
        CUDA_VERSION: 11.4.2
        CUDA_MAJOR: 11
        CUDA_MINOR: 4
        ZED_SDK_MAJOR: 3
        ZED_SDK_MINOR: 8

        # ROS
        ROS_DISTRO: foxy
        WORKSPACE: /workspace
        RMW_IMPLEMENTATION_INSTALL: rmw-cyclonedds-cpp
        RMW_IMPLEMENTATION: rmw_cyclonedds_cpp
        ROS_DOMAIN_ID: 7

        # Entrypoint
        ENTRYPOINT_HOST_PATH: Docker/entrypoints/zed_entrypoint.bash
    privileged: true
    # Not necessary when running in host network mode.
    #ports:
    #  - 8080:8080 # Passthrough for Jupyter Notebook
    #  - 1234:1234 # Passthrough for SSH

      #https://linuxconfig.org/how-to-move-docker-s-default-var-lib-docker-to-another-directory-on-ubuntu-debian-linux
      # sudo mount --rbind /mnt/docker /var/lib/docker
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
      - ./src/smap/smap_interfaces:/workspace/src/smap/smap_interfaces
      - ./src/smap/smap_sampler:/workspace/src/smap/smap_sampler

    cap_add:
      - SYS_PTRACE
    command: >
      bash -c "
        ros2 launch zed_wrapper zed2.launch.py config_path:=/workspace/config/p3dx.yaml publish_tf:=false cam_pose:=[0.0,0.0,0.91,0.0,0.0,0.0] & 
        (sleep 30 && ros2 launch smap_sampler sampler_launch.py)
      "
    #RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ROS_DOMAIN_ID=7 ros2 launch zed_wrapper zed2.launch.py publish_tf:=false & RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ROS_DOMAIN_ID=7 ros2 run smap_sampler smap_sampler_node

    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

  ros2-env:
    user: "ros"
    network_mode: "host"
    image: smap:env
    healthcheck:
      test: ["CMD-SHELL", "ps -a | grep -q gzclient"]
      start_period: 1m
      interval: 5s
      timeout: 1s
      retries: 300
    container_name: smap-env
    build:
      network: host
      context: .
      dockerfile: ./Docker/Dockerfile_env.dockerfile
      args:
        # Base Image
        IMAGE_NAME: nvidia/cudagl:11.4.2-devel-ubuntu20.04
        UBUNTU_VERSION: 20.04
        CUDA_VERSION: 11.4.2
        GL_VERSION: 1.2

        # ROS
        ROS_DISTRO: foxy
        WORKSPACE: /workspace
        RMW_IMPLEMENTATION_INSTALL: rmw-cyclonedds-cpp
        RMW_IMPLEMENTATION: rmw_cyclonedds_cpp
        ROS_DOMAIN_ID: 7

        # Entrypoint
        ENTRYPOINT_HOST_PATH: Docker/entrypoints/env_entrypoint.bash

    privileged: true
    # Not necessary when running in host network mode.
    #ports:
    #  - 8080:8080 # Passthrough for Jupyter Notebook
    #  - 1234:1234 # Passthrough for SSH
    environment:
      - "DISPLAY"
      - "QT_X11_NO_MITSHM=1" #fix some QT bugs
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/.X11-unix:/tmp/.X11-unix # Share X11 socket with container
      - $HOME/.Xauthority:/home/ros/.Xauthority # Share X11 permissions
      #- ./src:/workspace/src
      - ./src/smap/smap_core:/workspace/src/smap/smap_core
      - ./src/smap/smap_interfaces:/workspace/src/smap/smap_interfaces
      # - ./src/slam_toolbox:/workspace/src/slam_toolbox
      - ./scripts:/workspace/scripts
      - ./aux:/workspace/aux
      - ./Docker:/workspace/Docker
      # - ./src/P3DX:/workspace/src/P3DX
    cap_add:
      - SYS_PTRACE
    command: >
      bash -c 
      "
        (
          tail -F /dev/null
        )
      "
    # ros2 run smap_core perception_server_node.py
  # (git clone --recursive https://github.com/ocornut/imgui.git imgui)
    #ros2 run smap_core classification_component_node.py ;
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

  ros2-nav2:
    user: "ros"
    network_mode: "host"
    image: smap:env
    container_name: smap-nav2

    privileged: true
    # Not necessary when running in host network mode.
    #ports:
    #  - 8080:8080 # Passthrough for Jupyter Notebook
    #  - 1234:1234 # Passthrough for SSH
    environment:
      - "DISPLAY"
      - "QT_X11_NO_MITSHM=1" #fix some QT bugs
      - "ROS_DOMAIN_ID=5"
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/.X11-unix:/tmp/.X11-unix # Share X11 socket with container
      - $HOME/.Xauthority:/home/ros/.Xauthority # Share X11 permissions
      - ./src/smap/smap_core:/workspace/src/smap/smap_core
      - ./src/smap/smap_interfaces:/workspace/src/smap/smap_interfaces
      - ./scripts:/workspace/scripts
      - ./src/P3DX:/workspace/src/P3DX
    cap_add:
      - SYS_PTRACE
    command: >
      bash -c 
      "
        tail -f /dev/null
      "
    # entrypoint: "tail -f /dev/null"
    #ros2 run smap_core classification_component_node.py ;
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]


  ros2-torch:
    user: "ros"
    network_mode: "host"
    image: smap:ros2-torch
    container_name: smap-torch
    build:
      network: host
      context: .
      target: env-setup
      dockerfile: ./Docker/Dockerfile_torch.dockerfile
      args:
        # Base Image
        IMAGE_NAME: nvidia/cudagl:11.4.2-devel-ubuntu20.04
        UBUNTU_VERSION: 20.04
        CUDA_VERSION: 11.4.2
        GL_VERSION: 1.2

        # ROS
        ROS_DISTRO: foxy
        WORKSPACE: /workspace
        RMW_IMPLEMENTATION_INSTALL: rmw-cyclonedds-cpp
        RMW_IMPLEMENTATION: rmw_cyclonedds_cpp
        ROS_DOMAIN_ID: 7

        ## ML
        # Pytorch
        #https://pytorch.org/get-started/previous-versions/
        PYTORCH: 1.12.1
        TORCH_CUDA: cu113
        TORCH_VISION: 0.13.1
        TORCH_AUDIO: 0.12.1

        # Entrypoint
        ENTRYPOINT_HOST_PATH: Docker/entrypoints/torch_entrypoint.bash

    privileged: true
    # Not necessary when running in host network mode.
    #ports:
    #  - 8080:8080 # Passthrough for Jupyter Notebook
    #  - 1234:1234 # Passthrough for SSH
    environment:
      - "DISPLAY"
      - "QT_X11_NO_MITSHM=1" #fix some QT bugs
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/.X11-unix:/tmp/.X11-unix # Share X11 socket with container
      - $HOME/.Xauthority:/home/ros/.Xauthority # Share X11 permissions
      - ./src/smap/smap_interfaces:/workspace/src/smap/smap_interfaces
      - ./src/smap/smap_perception_wrapper:/workspace/src/smap/smap_perception_wrapper
      - ./src/smap/smap_yolo_v5:/workspace/src/smap/smap_yolo_v5
    cap_add:
      - SYS_PTRACE
    command: >
      bash -c "
        tail -f /dev/null
      "
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

  ros2-torch-yolov5:
    user: "ros"
    network_mode: "host"
    image: smap:torch-yolov5
    container_name: smap-torch-yolov5
    healthcheck:
      test: ["CMD", "bash", "-c", ". /workspace/install/setup.bash; ros2 pkg list | grep -q smap_yolo_v5"]
      #test: ["CMD-SHELL", "ros2 pkg list | grep -q smap_yolo_v5"]
      #test: ["CMD", "bash", "-c", "ps -a | grep -q smap_sampler"]
      start_period: 1m
      interval: 5s
      timeout: 1s
      retries: 300
    # depends_on:
    #   ros2-zed:
    #     condition: service_healthy
    build:
      network: host
      context: .
      # target: nvidia
      target: yolo-v5
      dockerfile: ./Docker/Dockerfile_torch.dockerfile
      args:
        # Base Image
        IMAGE_NAME: nvidia/cudagl:11.4.2-devel-ubuntu20.04
        UBUNTU_VERSION: 20.04
        CUDA_VERSION: 11.4.2
        GL_VERSION: 1.2

        # ROS
        ROS_DISTRO: foxy
        WORKSPACE: /workspace
        RMW_IMPLEMENTATION_INSTALL: rmw-cyclonedds-cpp
        RMW_IMPLEMENTATION: rmw_cyclonedds_cpp
        ROS_DOMAIN_ID: 7

        ## ML
        # Pytorch
        #https://pytorch.org/get-started/previous-versions/
        PYTORCH: 1.12.1
        TORCH_CUDA: cu113
        TORCH_VISION: 0.13.1
        TORCH_AUDIO: 0.12.1

        # Entrypoint
        ENTRYPOINT_HOST_PATH: Docker/entrypoints/yolo_v5_entrypoint.bash
      #shm_size: '2gb' # <-- when BUILDING
    shm_size: '8gb' # <-- when RUNNING 

    privileged: true
    # Not necessary when running in host network mode.
    #ports:
    #  - 8080:8080 # Passthrough for Jupyter Notebook
    #  - 1234:1234 # Passthrough for SSH
    environment:
      - "DISPLAY"
      - "QT_X11_NO_MITSHM=1" #fix some QT bugs
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/.X11-unix:/tmp/.X11-unix # Share X11 socket with container
      - $HOME/.Xauthority:/home/ros/.Xauthority # Share X11 permissions
      - ./src/smap/smap_interfaces:/workspace/src/smap/smap_interfaces
      - ./src/smap/smap_perception/smap_perception_wrapper:/workspace/src/smap/smap_perception_wrapper
      - ./src/smap/smap_perception/detectors/smap_yolo_v5:/workspace/tmp
      #/src/smap/smap_yolo_v5/tmp
    cap_add:
      - SYS_PTRACE
    command: >
      bash -c "
        tail -f /dev/null &&
        . /workspace/install/setup.bash && 
        tail -F /dev/null
      "

    # ros2 launch smap_yolo_v5 yolov5_launch.py

    # ros2 launch smap_yolo_v5 yolov5_launch.py


    #ros2 run smap_yolo_v5 yolo_v5_node.py && 
    #jupyter-lab --no-browser --notebook-dir=src/smap/smap_yolo_v5/notebooks/yolo_v5 --NotebookApp.token='' --NotebookApp.password='' --NotebookApp.username=''; 
    #ros2 run smap_yolo_v5 yolo_v5.py ; 
    #jupyter-lab --no-browser --notebook-dir=src/smap/smap_yolo_v5/notebooks ;
    #bash -c "tail -F /dev/null"
      
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]


volumes:
  torch-yolov5:
    external: true
  datasets:
    external: true